Pytest测试框架1 - 强大的fixture功能

1. 如何声明一个fixture, 如何使用一个fixture?
1) 在函数前加上装饰器pytest.fixture()(当然前提是在脚本中先import pytest).
2) 依照1)中的操作先声明一个fixture, 然后在测试函数的参数列表中添加fixture函数名, 然后在测试函数中就可以像引用参数那样引用fixture的结果了

2. fixture的优先级顺序?
首先搜索该测试所在的模块, 然后搜索conftest.py, 然后才执行这些fixture函数

3. 如何具体查看fixture是怎样执行的?
pytest --setup-show {文件名}  例: pytest --setup-show test_example.py

4. 写一个fixture使得一个测试用例函数在函数前打印“开始执行测试用例”, 测试用例结束后打印“测试用例执行结束”
@pytest.fixture()
def deco_function():
    print("开始执行测试用例")
    yield
    print(“测试用例执行结束”)

def test_function(deco_function):
    print("执行测试用例")


Pytest测试框架2 - 深入讲解Pytest的配置文件

1. pytest.ini是什么? 放在哪里? 如何查看pytest.ini的内容?
是pytest的主配置文件
放在项目的根目录下
使用pytest --help查看pytest.ini的所有设置选项

2. conftest.py里主要放什么？作用范围是什么?
主要放hook函数和fixture, 作用范围是该文件所在的目录以及所有子目录

3. -v参数的含义? 如何在pytest.ini文件中配置该参数?
在pytest中默认以.来表示测试通过, 为了显示更详细的信息, 使用-v
在pytest.ini中的配置方式:
[pytest]
addopts = -v

4. -—collect-only 参数的含义? 给一个示例?
展示在给定的配置下哪些测试用例会被执行, 但并不会真的执行这些测试
示例: pytest -v -k "baidu" --collect-only test.py
表示根据-k筛选出了哪些用例

5. -k 参数的含义? 使用示例?
指定含有关键字的测试用例, 即类中含有这些关键字的方法
示例: pytest -v -k "baidu" test.py 即只会运行含有baidu的方法

6. -m 参数的含义? 使用示例?
指定mark 来运行测试用例, marker要提前在pytest.ini里注册, marker的
样子类似: @pytest.mark.{markname} 
示例: pytest -v -m "smoke" test.py

7. 如何在pytest.ini中注册一个名为smoke的marker?
[pytest]
markers = 
    smoke: run the smoke test functions for test project

8. 如何限制没有注册的marker?
[pytest]
addopts = --strict-markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    serial

9. 如何查看所有的marker
pytest --markers

10. 如何使用allure生成测试报告? 每个参数的含义?
[pytest]
addopts = --alluredir ./allure-results

--alluredir 后面指定了allure生成结果的文件夹地址, 内容是一些json文件

allure generate allure-results -o allure
然后在命令行继续调用allure命令, 数据来源是 generate 后面的参数, 
-o 是指输出文件夹的名称

11. 如何在pytest.ini中指定pytest的最低版本为5以上
minversion = 5.0

12. 如何指定pytest忽略目录? 如何指定访问目录?
norecursedirs = .* data config utils
testpaths = tests

官网的例子:
[pytest]
minversion = 6.0
addopts = -ra -q
testpaths =
    tests
    integration


pytest 测试框架3 - 如何将测试代码与测试数据分离

1. 如何书写 pytest 参数化的装饰器? 每个参数代表的意义是什么?
@pytest.mark.parametrize(argnames, argvalues)
argnames 代表在测试方法里调用的参数名, argvalues 代表参数名对应的值

2. 请对该测试方法进行参数化, 要求是参数化的数据在当前py文件中
param = [({'Content-Type': "application/x-www-form-urlencoded"}, {"mid": "104", "name": "adroid3", "content": "8", "status": "1", "author": "xixi"}),
         ({'Content-Type': "application/x-www-form-urlencoded"}, {"mid": "104", "name": "adroid3", "content": "8", "status": "1", "author": "xixi"}),
         ({'Content-Type': "application/x-www-form-urlencoded"}, {"mid": "104", "name": "adroid3", "content": "8", "status": "1", "author": "xixi"})]

@pytest.mark.parametrize("headers,payload", param)
def test_param_1(self, headers, payload):
    url = "http://127.0.0.1:8000/add_message/"
    response = requests.request("POST", url, data=payload, headers=headers)
    print(response.json())
    assert response.json()['message'] == "add message success" 

3. 测试数据独立成文件的思路? 分两步, 每一步的具体思路都是什么?
1) 首先根据测试方法的文件路径找到测试数据的文件路径
    具体思路: 1) 首先列出测试方法文件的绝对路径和数据文件的绝对路径, 观察两者的不同, 发现只有测试用例的主文件夹和
                测试数据的主文件夹名不同, 还有最终的文件名后缀不同, 所以以不同的点为分界线取前后不变的部分
            2)  然后用这两部分不变的加上测试数据的主文件夹名再加上替换过的文件名后缀,最终组成测试数据的绝对路径
2) 然后用 python 读文件的方法从测试数据文件中读取数据
    具体思路: 1) 设计另外一个函数, 传入参数为步骤1)中得到的测试数据绝对路径
             2) 根据测试数据文件中一条测试数据的字段, 预先设置几个列表
             3) 从测试数据文件中读取数据, 把每条测试数据中的每个字段存入2)中的列表中
             4) 使用zip函数把一条测试数据变成元组的形式, 最终组成一个列表, 传给参数化装饰器

4. 编写测试数据的json文件
格式是: 最外层是一个字典, 每个关键字对应一个列表, 列表中的每个元素为字典, 一个字典为一条测试数据
{
  "test": [
      {   "case": "测试用例名1",
          "headers": {key: value},
          "querystring": "string",
          "payload": {
              key: value,
              key: value
          },
          "expected": {
              key: vlaue
          }
      },
      {   "case": "测试用例名2",
          "headers": {key: value},
          "querystring": "string",
          "payload": {
              key: value,
              key: value
          },
          "expected": {
              key: vlaue
          }
      }
  ]
}


5. 实现查找测试数据文件的方法和从测试数据中读取文件的方法(假设测试用例主文件名为testcase, 测试数据主文件名叫data)
import os

def get_data_path(case_path):
    file_paths = os.path.dirname(case_path).split(os.sep+"testcase"+os.sep, 1)
    data_file_name = os.path.basename(case_path).replace(".py", ".json")
    test_data_path = os.sep.join([file_paths[0], "data", file_paths[1], data_file_name])
    return test_data_path

def get_test_data(test_data_path):
    case = []
    headers = []
    querystring = []
    payload = []
    expected = []
    with open(test_data_path, encoding='utf-8') as f:
        dat = json.loads(f.read())
        test = dat['test']
        for td in test:
            case.append(td['case'])
            headers.append(td.get('headers', {}))
            querystring.append(td.get('querystring', {}))
            payload.append(td.get('payload', {}))
            expected.append(td.get('expected', {}))
    list_parameters = list(zip(case, headers, querystring, payload, expected))
    return list_parameters
        
6. 解释 zip 函数的使用方法
假设有 
list1 = [1, 2, 3]
list2 = [4, 5, 6]
list3 = [7, 8, 9]

使用 list(zip(list1, list2, list3)) 会得到 [(1, 4, 7), (2, 5, 8), (3, 6, 9)]

7. 参数化装饰器里ids是干什么用的?
是给测试数据中的每条测试数据加上别名的, 方便追踪

8. 结合2中的例子来做彻底的参数化
from utils.get_data import get_data_path
from utils.get_data import get_test_data

case, param = get_test_data(get_data_path(__file__))

@pytest.mark.parametrize("case,headers,querystring,payload,expected", param, ids=case)
def test_params_2(self, case, headers, querystring, payload, expected):
    pass
