2-1 元素定位补充
1. 一共有几种元素定位方法，分别是什么
2. id和name和class_bame和tag_name有什么特点
3. 

2-2 基本元素定位方法id
1. 使用id定位方式定位京东首页输入框并输入电脑进行搜索

2-3 类名、文字链接与局部文字链接定位的方法
1. 使用类名定位的方式定位京东首页左侧"家用电器"
2. 使用文字链接的方式定位京东首页左侧菜单栏中的“手机”
3. 使用局部文字链接的方式定位京东首页左侧菜单栏中的“汽车用品”中的“汽车用”三个字

2-4 xpath与css选择器定位
1. 使用xpath方式定位京东首页左侧“运营商”
2. 使用css选择器方式定位京东首页左侧“厨具”

2-5 鼠标和键盘事件演示及源代码阅读
1. 使用鼠标事件打开京东首页，悬停到手机上，打开二级菜单后打开老人机
2. 使用键盘事件从京东首页的搜索框搜索电脑并回车

2-6 截图方法的应用及简单方法封装
1. 打开京东首页左侧菜单的“手机”类目下的“老人机”页面, 然后保存老人机页面到项目下images目录中.

2-7 获取登录后的cookies
1. 获取 cookie 并绕过登录的思路?
2. 获取京东登录后的cookies并存储，在控制台打印存储的cookies

2-8 使用cookies绕过登录
1. 使用上一小节获取到的cookies打开页面https://order.jd.com/center/list.action

2-9 js操作定位页面上的元素
1. 使用12306的首页定位一个出发、到达地并从下拉列表中选择一个

2-10 js定位操作
1. 去掉时间控件中的readonly属性并填入一个时间，并搜索车次
2. driver.quit()和driver.close()有什么区别


3-1 实战业务流程说明

3-2 无经验时的代码开发思路建议和登录保存cookies流程开发
1. 创建一个循环, 然后在循环中实现检测cookies,如果cookies不生效则重新登录获取cookies,如果生效则继续到商品页面
2. 实现登录、保存cookies函数

3-3 cookies验证功能开发
1. 实现检测cookies函数
2. 实现保存cookies信息到driver函数

3-4 获取商品详情信息开发(一)
1. 实现从首页跳转到商品列表页到商品详情页的to_goods_page方法
2. 在to_goods_page中点击规格与包装并保存这些信息到文件中

3-5 获取商品详情信息开发(二)
1. 完成上一节中的获取每个元素的字典格式的方法get_info_element_dict和保存信息到文件中的方法save_goods_info

3-6 有Error和无Error的错误排查思路




4-1 绝对定位和相对定位
1. console中使用xpath定位格式
2. 使用绝对定位方式定位京东首页的logo
3. 使用xpath相对定位的方式定位“账户登录”(使用两种方法)

4-2 通配符与不包含筛选
1. 通配符的符号是?
2. 标签匹配从几开始?
3. 不包含筛选的写法?(两种方式)
场景为: 在jd商品详情页面的规格与包装下定位所有的右边部分内容但不包含问号(使用console定位)

4-3 Xpath函数运算的简单使用
1. 去除属性两边空格
2. 统计元素个数
3. 以什么开头
4. 限定标签长度

4-4 各种亲戚标签的定位
1. 父标签的使用
2. 弟弟标签的定位
3. 哥哥标签的定位
4. 所有后代节点
5. 所有祖先节点

4-5 CSS选择器中的那些符号
1. css选择器console中的写法
2. .含义
3. #含义
4. ,含义
5. 空格含义
6. >含义

4-6 CSS选择器的属性筛选
1. 定位页面上所有的class属性为p-price的div元素
2. 页面上元素的class=“lh clearfix”, css选择器应该如何写
3. 包含的应该怎么写?
4. id属性值以f开头应该怎么写?

4-7 回顾js定位写法及webdriver




5-1 Python虚拟环境的创建


5-2 环境迁移必备的requirements
1. 如何从当前环境中导出requirements
2. 如何在新环境中安装requirements

5-3 分布式环境搭建
1. 如何搭建分布式环境？

5-4 环境搭建补充和分布式环境测试代码开发
1. 创建一个py文件，控制并启动两个远程机器，并打开浏览器访问百度

5-5 PyMySQL的基本使用
1. 新建数据库python_ui, 新建goods表，包含id,computer_part, computer_info字段
2. 新建my_mysql_connection.py，其中编写连接到数据库的函数，并插入一条数据

5-6 实战多个业务流程同时运行代码拆分(1)
1. 将第三章中的jingdong.py文件中的关于cookies的操作都抽出来
2. 将整个的登录逻辑写成一个函数
3. 使用远程登录的方式启动，两台机分别启动不同的流程，一台启动thinkpad, 一台启动dell

5-7 实战多个业务流程同时运行代码拆分(2)


5-8 实战多个业务流程同时运行代码拆分(3)




6-1 等待的几种方式
1. 分别写一个 强制等待、隐式等待和显式等待的例子, 其中显式等待用定位京东登录页面「账户登录」来举例
2. 隐式等待有什么特点?
3. 显式等待和隐式等待有什么区别

6-2 Python中的几个魔法方法
1. __new__和__init__运行的先后顺序以及各自的作用
2. __call__()的作用, 它的生命周期

6-3 WebDriverWait的源代码解读
1. 解释说明WebDriverWait(driver, 10).until(EC.presence_of_element_located(locator))的运行方式



7-1 类的创建与动态创建
1. 类有哪些特性
2. 动态创建类的两种方式
3. 使用type给类增加属性和方法的两个例子
4. 使用type应用继承的特性

7-2 使用元类来构建一个类
1. 使用元类构建一个类, 在元类的定义中添加一个加法方法, 在根据元类构建出的类中创建实例调用加法验证结果

7-3 数据库连接池的创建与环境隔离的写法
1. 配置环境隔离
2. 创建数据库连接池

7-4 Field类开发
1. 创建Field类及其相关子类

7-5 Model元类的开发
1. 创建Model的元类

7-6 Model子类开发, 实现insert方法
1. 实现Model类的写法和其中insert方法

7-7 Debug调试插入数据流程
1. 写一个测试数据用上面的insert方法调用, 在数据库中确认

7-8 实现查询、修改和删除方法
1. 继续完成Model类中的查询、修改和删除方法 并进行测试

7-9 方法的测试和重写数据存储
1. 将京东的存储改为用ORM方式,并进行验证



8-1 从源代码开始入门日志的使用
1. 列举日志中的常见等级并打印出来
2. 默认情况下打印的日志等级
3. logging.basicConfig的三种配置日志等级的方式
4. 查看basicConfig的源码

8-2 日志的多参数配置与解决中文问题
1. 日志和日期的格式化
2. 使用basicConfig的各个参数配置日志输出
3. 配置日志模块使得日志在控制台和文件中同时输出,且输出中文

8-3 日志解析引擎代码开发(一)
1. 写一个可以解析.properties 配置文件的日志加载引擎, 日志内容为:
# filename就是你要填写的日志路径及文件名称
filename = my-test.log

level=DEBUG   # 这是日志的等级设置

foramt=%(asctime)s - %(levelname)s - %(message)s
www.imooc.com = 123

8-4 日志解析引擎代码开发(二)
1. 使用上一节的引擎来解析日志配置, 并在不同的文件中验证

8-5 企业中全局日志配置一种常见方式
1. 新建logging.conf文件, 书写内容
2. 新建logging_setting.py文件, 然后读取logging.conf, 并测试

8-6 源代码层面分析日志配置文件的写法
1. 解析这句话: logging.config.fileConfig(conf_log)



9-1 PO的简单解释和目录结构的说明
1. 列举项目的层级结构并说明每个文件夹的作用
2. 京东商品浏览的这一整套操作一共包含哪些页面层次？

9-2 目录内容的组织
1. 完成config文件夹的内容
2. 完成model、orm、utils文件夹的内容

9-3 浏览器引擎启动工具开发
1. 在utils中完成浏览器引擎启动工具的开发，实现本地启动和远程启动

9-4 PageObject封装(1)
1. 新建base_page.py,完成Basepage的封装

9-5 PageObject封装(2)
1. 新建goods_list_page.py, 完成从首页点击，跳转到商品列表页，再到跳转到商品详情页的封装

9-6 PageObject封装(3)
1. 新建goods_info_page.py, 完成商品详情页的功能封装

9-7 PageObject封装(4)